# Python stubs generated by omniidl from Robot.idl

import omniORB, _omnipy
from omniORB import CORBA, PortableServer
_0_CORBA = CORBA

_omnipy.checkVersion(3,0, __file__)


#
# Start of module "fr"
#
__name__ = "fr"
_0_fr = omniORB.openModule("fr", r"Robot.idl")
_0_fr__POA = omniORB.openModule("fr__POA", r"Robot.idl")


#
# Start of module "fr.upem"
#
__name__ = "fr.upem"
_0_fr.upem = omniORB.openModule("fr.upem", r"Robot.idl")
_0_fr__POA.upem = omniORB.openModule("fr__POA.upem", r"Robot.idl")


#
# Start of module "fr.upem.robot"
#
__name__ = "fr.upem.robot"
_0_fr.upem.robot = omniORB.openModule("fr.upem.robot", r"Robot.idl")
_0_fr__POA.upem.robot = omniORB.openModule("fr__POA.upem.robot", r"Robot.idl")


# struct Position
_0_fr.upem.robot.Position = omniORB.newEmptyClass()
class Position (omniORB.StructBase):
    _NP_RepositoryId = "IDL:fr/upem/robot/Position:1.0"

    def __init__(self, posX, posY):
        self.posX = posX
        self.posY = posY

_0_fr.upem.robot.Position = Position
_0_fr.upem.robot._d_Position  = (omniORB.tcInternal.tv_struct, Position, Position._NP_RepositoryId, "Position", "posX", omniORB.tcInternal.tv_long, "posY", omniORB.tcInternal.tv_long)
_0_fr.upem.robot._tc_Position = omniORB.tcInternal.createTypeCode(_0_fr.upem.robot._d_Position)
omniORB.registerType(Position._NP_RepositoryId, _0_fr.upem.robot._d_Position, _0_fr.upem.robot._tc_Position)
del Position

# typedef ... SensorSet
class SensorSet:
    _NP_RepositoryId = "IDL:fr/upem/robot/SensorSet:1.0"
    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")
_0_fr.upem.robot.SensorSet = SensorSet
_0_fr.upem.robot._d_SensorSet  = (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_any, 0)
_0_fr.upem.robot._ad_SensorSet = (omniORB.tcInternal.tv_alias, SensorSet._NP_RepositoryId, "SensorSet", (omniORB.tcInternal.tv_sequence, omniORB.tcInternal.tv_any, 0))
_0_fr.upem.robot._tc_SensorSet = omniORB.tcInternal.createTypeCode(_0_fr.upem.robot._ad_SensorSet)
omniORB.registerType(SensorSet._NP_RepositoryId, _0_fr.upem.robot._ad_SensorSet, _0_fr.upem.robot._tc_SensorSet)
del SensorSet

# exception InvalidPosition
_0_fr.upem.robot.InvalidPosition = omniORB.newEmptyClass()
class InvalidPosition (CORBA.UserException):
    _NP_RepositoryId = "IDL:fr/upem/robot/InvalidPosition:1.0"

    def __init__(self, message):
        CORBA.UserException.__init__(self, message)
        self.message = message

_0_fr.upem.robot.InvalidPosition = InvalidPosition
_0_fr.upem.robot._d_InvalidPosition  = (omniORB.tcInternal.tv_except, InvalidPosition, InvalidPosition._NP_RepositoryId, "InvalidPosition", "message", (omniORB.tcInternal.tv_string,0))
_0_fr.upem.robot._tc_InvalidPosition = omniORB.tcInternal.createTypeCode(_0_fr.upem.robot._d_InvalidPosition)
omniORB.registerType(InvalidPosition._NP_RepositoryId, _0_fr.upem.robot._d_InvalidPosition, _0_fr.upem.robot._tc_InvalidPosition)
del InvalidPosition

# exception AlreadyStarted
_0_fr.upem.robot.AlreadyStarted = omniORB.newEmptyClass()
class AlreadyStarted (CORBA.UserException):
    _NP_RepositoryId = "IDL:fr/upem/robot/AlreadyStarted:1.0"

    def __init__(self, message):
        CORBA.UserException.__init__(self, message)
        self.message = message

_0_fr.upem.robot.AlreadyStarted = AlreadyStarted
_0_fr.upem.robot._d_AlreadyStarted  = (omniORB.tcInternal.tv_except, AlreadyStarted, AlreadyStarted._NP_RepositoryId, "AlreadyStarted", "message", (omniORB.tcInternal.tv_string,0))
_0_fr.upem.robot._tc_AlreadyStarted = omniORB.tcInternal.createTypeCode(_0_fr.upem.robot._d_AlreadyStarted)
omniORB.registerType(AlreadyStarted._NP_RepositoryId, _0_fr.upem.robot._d_AlreadyStarted, _0_fr.upem.robot._tc_AlreadyStarted)
del AlreadyStarted

# exception NotStarted
_0_fr.upem.robot.NotStarted = omniORB.newEmptyClass()
class NotStarted (CORBA.UserException):
    _NP_RepositoryId = "IDL:fr/upem/robot/NotStarted:1.0"

    def __init__(self, message):
        CORBA.UserException.__init__(self, message)
        self.message = message

_0_fr.upem.robot.NotStarted = NotStarted
_0_fr.upem.robot._d_NotStarted  = (omniORB.tcInternal.tv_except, NotStarted, NotStarted._NP_RepositoryId, "NotStarted", "message", (omniORB.tcInternal.tv_string,0))
_0_fr.upem.robot._tc_NotStarted = omniORB.tcInternal.createTypeCode(_0_fr.upem.robot._d_NotStarted)
omniORB.registerType(NotStarted._NP_RepositoryId, _0_fr.upem.robot._d_NotStarted, _0_fr.upem.robot._tc_NotStarted)
del NotStarted

# interface RobotPilote
_0_fr.upem.robot._d_RobotPilote = (omniORB.tcInternal.tv_objref, "IDL:fr/upem/robot/RobotPilote:1.0", "RobotPilote")
omniORB.typeMapping["IDL:fr/upem/robot/RobotPilote:1.0"] = _0_fr.upem.robot._d_RobotPilote
_0_fr.upem.robot.RobotPilote = omniORB.newEmptyClass()
class RobotPilote :
    _NP_RepositoryId = _0_fr.upem.robot._d_RobotPilote[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_fr.upem.robot.RobotPilote = RobotPilote
_0_fr.upem.robot._tc_RobotPilote = omniORB.tcInternal.createTypeCode(_0_fr.upem.robot._d_RobotPilote)
omniORB.registerType(RobotPilote._NP_RepositoryId, _0_fr.upem.robot._d_RobotPilote, _0_fr.upem.robot._tc_RobotPilote)

# RobotPilote operations and attributes
RobotPilote._d__get_robotPosition = ((),(omniORB.typeMapping["IDL:fr/upem/robot/Position:1.0"],),None)
RobotPilote._d_start = ((), (), {_0_fr.upem.robot.AlreadyStarted._NP_RepositoryId: _0_fr.upem.robot._d_AlreadyStarted})
RobotPilote._d_move = ((omniORB.typeMapping["IDL:fr/upem/robot/Position:1.0"], ), (), {_0_fr.upem.robot.InvalidPosition._NP_RepositoryId: _0_fr.upem.robot._d_InvalidPosition})
RobotPilote._d_stop = ((), (omniORB.typeMapping["IDL:fr/upem/robot/Position:1.0"], ), {_0_fr.upem.robot.NotStarted._NP_RepositoryId: _0_fr.upem.robot._d_NotStarted})

# RobotPilote object reference
class _objref_RobotPilote (CORBA.Object):
    _NP_RepositoryId = RobotPilote._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def _get_robotPosition(self, *args):
        return _omnipy.invoke(self, "_get_robotPosition", _0_fr.upem.robot.RobotPilote._d__get_robotPosition, args)

    def start(self, *args):
        return _omnipy.invoke(self, "start", _0_fr.upem.robot.RobotPilote._d_start, args)

    def move(self, *args):
        return _omnipy.invoke(self, "move", _0_fr.upem.robot.RobotPilote._d_move, args)

    def stop(self, *args):
        return _omnipy.invoke(self, "stop", _0_fr.upem.robot.RobotPilote._d_stop, args)

    __methods__ = ["_get_robotPosition", "start", "move", "stop"] + CORBA.Object.__methods__

omniORB.registerObjref(RobotPilote._NP_RepositoryId, _objref_RobotPilote)
_0_fr.upem.robot._objref_RobotPilote = _objref_RobotPilote
del RobotPilote, _objref_RobotPilote

# RobotPilote skeleton
__name__ = "fr__POA.upem.robot"
class RobotPilote (PortableServer.Servant):
    _NP_RepositoryId = _0_fr.upem.robot.RobotPilote._NP_RepositoryId


    _omni_op_d = {"_get_robotPosition": _0_fr.upem.robot.RobotPilote._d__get_robotPosition, "start": _0_fr.upem.robot.RobotPilote._d_start, "move": _0_fr.upem.robot.RobotPilote._d_move, "stop": _0_fr.upem.robot.RobotPilote._d_stop}

RobotPilote._omni_skeleton = RobotPilote
_0_fr__POA.upem.robot.RobotPilote = RobotPilote
omniORB.registerSkeleton(RobotPilote._NP_RepositoryId, RobotPilote)
del RobotPilote
__name__ = "fr.upem.robot"

# interface RobotControl
_0_fr.upem.robot._d_RobotControl = (omniORB.tcInternal.tv_objref, "IDL:fr/upem/robot/RobotControl:1.0", "RobotControl")
omniORB.typeMapping["IDL:fr/upem/robot/RobotControl:1.0"] = _0_fr.upem.robot._d_RobotControl
_0_fr.upem.robot.RobotControl = omniORB.newEmptyClass()
class RobotControl :
    _NP_RepositoryId = _0_fr.upem.robot._d_RobotControl[1]

    def __init__(self, *args, **kw):
        raise RuntimeError("Cannot construct objects of this type.")

    _nil = CORBA.Object._nil


_0_fr.upem.robot.RobotControl = RobotControl
_0_fr.upem.robot._tc_RobotControl = omniORB.tcInternal.createTypeCode(_0_fr.upem.robot._d_RobotControl)
omniORB.registerType(RobotControl._NP_RepositoryId, _0_fr.upem.robot._d_RobotControl, _0_fr.upem.robot._tc_RobotControl)

# RobotControl operations and attributes
RobotControl._d__get_maxPosition = ((),(omniORB.typeMapping["IDL:fr/upem/robot/Position:1.0"],),None)
RobotControl._d__set_maxPosition = ((omniORB.typeMapping["IDL:fr/upem/robot/Position:1.0"],),(),None)
RobotControl._d_getSensor = (((omniORB.tcInternal.tv_string,0), ), (omniORB.tcInternal.tv_any, ), None)
RobotControl._d_setSensor = (((omniORB.tcInternal.tv_string,0), omniORB.tcInternal.tv_any), (omniORB.tcInternal.tv_boolean, ), None)
RobotControl._d_getSensors = ((), (omniORB.typeMapping["IDL:fr/upem/robot/SensorSet:1.0"], ), None)

# RobotControl object reference
class _objref_RobotControl (CORBA.Object):
    _NP_RepositoryId = RobotControl._NP_RepositoryId

    def __init__(self):
        CORBA.Object.__init__(self)

    def _get_maxPosition(self, *args):
        return _omnipy.invoke(self, "_get_maxPosition", _0_fr.upem.robot.RobotControl._d__get_maxPosition, args)

    def _set_maxPosition(self, *args):
        return _omnipy.invoke(self, "_set_maxPosition", _0_fr.upem.robot.RobotControl._d__set_maxPosition, args)

    def getSensor(self, *args):
        return _omnipy.invoke(self, "getSensor", _0_fr.upem.robot.RobotControl._d_getSensor, args)

    def setSensor(self, *args):
        return _omnipy.invoke(self, "setSensor", _0_fr.upem.robot.RobotControl._d_setSensor, args)

    def getSensors(self, *args):
        return _omnipy.invoke(self, "getSensors", _0_fr.upem.robot.RobotControl._d_getSensors, args)

    __methods__ = ["_get_maxPosition", "_set_maxPosition", "getSensor", "setSensor", "getSensors"] + CORBA.Object.__methods__

omniORB.registerObjref(RobotControl._NP_RepositoryId, _objref_RobotControl)
_0_fr.upem.robot._objref_RobotControl = _objref_RobotControl
del RobotControl, _objref_RobotControl

# RobotControl skeleton
__name__ = "fr__POA.upem.robot"
class RobotControl (PortableServer.Servant):
    _NP_RepositoryId = _0_fr.upem.robot.RobotControl._NP_RepositoryId


    _omni_op_d = {"_get_maxPosition": _0_fr.upem.robot.RobotControl._d__get_maxPosition, "_set_maxPosition": _0_fr.upem.robot.RobotControl._d__set_maxPosition, "getSensor": _0_fr.upem.robot.RobotControl._d_getSensor, "setSensor": _0_fr.upem.robot.RobotControl._d_setSensor, "getSensors": _0_fr.upem.robot.RobotControl._d_getSensors}

RobotControl._omni_skeleton = RobotControl
_0_fr__POA.upem.robot.RobotControl = RobotControl
omniORB.registerSkeleton(RobotControl._NP_RepositoryId, RobotControl)
del RobotControl
__name__ = "fr.upem.robot"

#
# End of module "fr.upem.robot"
#
__name__ = "fr.upem"


#
# End of module "fr.upem"
#
__name__ = "fr"


#
# End of module "fr"
#
__name__ = "Robot_idl"

_exported_modules = ( "fr", "fr.upem", "fr.upem.robot")

# The end.
